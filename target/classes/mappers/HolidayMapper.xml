<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hanming.oa.dao.HolidayMapper">
  <resultMap id="BaseResultMap" type="com.hanming.oa.model.Holiday">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="startday" jdbcType="TIMESTAMP" property="startday" />
    <result column="endday" jdbcType="TIMESTAMP" property="endday" />
    <result column="holidaydays" jdbcType="INTEGER" property="holidaydays" />
    <result column="test" jdbcType="VARCHAR" property="test" />
    <result column="reason" jdbcType="VARCHAR" property="reason" />
    <result column="enclosure" jdbcType="VARCHAR" property="enclosure" />
    <result column="processInstanceId" jdbcType="VARCHAR" property="processinstanceid" />
  </resultMap>
  <sql id="Base_Column_List">
    id, type, startday, endday, holidaydays, test, reason, enclosure, processInstanceId,filename,date
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from holiday
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from holiday
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.hanming.oa.model.Holiday">
    insert into holiday (id, type, startday, 
      endday, holidaydays, test, 
      reason, enclosure, processInstanceId,setFilename
      )
    values (#{id,jdbcType=INTEGER}, #{type,jdbcType=VARCHAR}, #{startday,jdbcType=TIMESTAMP}, 
      #{endday,jdbcType=TIMESTAMP}, #{holidaydays,jdbcType=INTEGER}, #{test,jdbcType=VARCHAR}, 
      #{reason,jdbcType=VARCHAR}, #{enclosure,jdbcType=VARCHAR}, #{processinstanceid,jdbcType=VARCHAR},#{filename,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.hanming.oa.model.Holiday">
    insert into holiday
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="startday != null">
        startday,
      </if>
      <if test="endday != null">
        endday,
      </if>
      <if test="holidaydays != null">
        holidaydays,
      </if>
      <if test="test != null">
        test,
      </if>
      <if test="reason != null">
        reason,
      </if>
      <if test="enclosure != null">
        enclosure,
      </if>
      <if test="processinstanceid != null">
        processInstanceId,
      </if>
      <if test="filename != null">
        filename,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="startday != null">
        #{startday,jdbcType=TIMESTAMP},
      </if>
      <if test="endday != null">
        #{endday,jdbcType=TIMESTAMP},
      </if>
      <if test="holidaydays != null">
        #{holidaydays,jdbcType=INTEGER},
      </if>
      <if test="test != null">
        #{test,jdbcType=VARCHAR},
      </if>
      <if test="reason != null">
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="enclosure != null">
        #{enclosure,jdbcType=VARCHAR},
      </if>
      <if test="processinstanceid != null">
        #{processinstanceid,jdbcType=VARCHAR},
      </if>
      <if test="filename != null">
        #{filename,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hanming.oa.model.Holiday">
    update holiday
    <set>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="startday != null">
        startday = #{startday,jdbcType=TIMESTAMP},
      </if>
      <if test="endday != null">
        endday = #{endday,jdbcType=TIMESTAMP},
      </if>
      <if test="holidaydays != null">
        holidaydays = #{holidaydays,jdbcType=INTEGER},
      </if>
      <if test="test != null">
        test = #{test,jdbcType=VARCHAR},
      </if>
      <if test="reason != null">
        reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="enclosure != null">
        enclosure = #{enclosure,jdbcType=VARCHAR},
      </if>
      <if test="processinstanceid != null">
        processInstanceId = #{processinstanceid,jdbcType=VARCHAR},
      </if>
      <if test="filename != null">
        filename = #{filename,jdbcType=VARCHAR}
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hanming.oa.model.Holiday">
    update holiday
    set type = #{type,jdbcType=VARCHAR},
      startday = #{startday,jdbcType=TIMESTAMP},
      endday = #{endday,jdbcType=TIMESTAMP},
      holidaydays = #{holidaydays,jdbcType=INTEGER},
      test = #{test,jdbcType=VARCHAR},
      reason = #{reason,jdbcType=VARCHAR},
      enclosure = #{enclosure,jdbcType=VARCHAR},
      processInstanceId = #{processinstanceid,jdbcType=VARCHAR},
      filename = #{filename,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- List<Holiday> list(); -->
  <select id="list"  resultType="Holiday">
  	select 
    <include refid="Base_Column_List"/>
    from holiday
  </select>
  
  <!-- Holiday selectHolidayByHolidayId(Integer holidayId); -->
  <select id="selectHolidayByHolidayId" resultType="UserHolidayByHolidayId" parameterType="Integer">
  	SELECT ho.date,ho.id,ho.type,ho.startday,ho.endday,ho.holidaydays,ho.test,ho.reason,ho.enclosure,ho.processInstanceId,tu.id tuId,tu.username,tu.`name` ,tr.`name` role,td.`name` department,ho.filename filename
	FROM holiday ho
	LEFT JOIN user_holiday uh ON uh.holidayId = ho.id
	LEFT JOIN t_user tu ON tu.id = uh.userId
	LEFT JOIN t_department_user  tdu ON tdu.userId = tu.id
	LEFT JOIN t_department td ON td.id = tdu.departmentId
	LEFT JOIN t_user_role tur ON tur.userId = tu.id
	LEFT JOIN t_role tr ON tr.id = tur.roleId
	WHERE ho.id =#{holidayId}
  </select>
  
  <!-- Holiday selectHolidayByProcessInstanceId(String processInstanceId); -->
  <select id="selectHolidayByProcessInstanceId" resultType="Holiday" parameterType="String">
  	select 
    <include refid="Base_Column_List" />
    from holiday
    where processinstanceid = #{processInstanceId}
  </select>
  
  <!-- List<Holiday> listLikeStateType(@Param("state") String state, @Param("type") String type); -->
  <select id="listLikeStateType" parameterType="map" resultType="Holiday">
  	select 
    <include refid="Base_Column_List" />
    from holiday
    <where>
	    <if test="state != '状态'">
	         test = #{state}
	    </if>
	    <if test="type != '类型'">
	         AND type = #{type}
	    </if>
    </where>
  </select>

  <!-- HolidayMapper selectHolidayByProcessInstanceIdLikeStateType(String processInstanceId, @Param("state") String state, @Param("type") String type); -->
  <select id="selectHolidayByProcessInstanceIdLikeStateType" resultType="Holiday">
  select 
    <include refid="Base_Column_List" />
    from holiday
    <where>
    	processinstanceid = #{processInstanceId}
	    <if test="state != '状态'">
	         AND test = #{state}
	    </if>
	    <if test="type != '类型'">
	         AND type = #{type}
	    </if>
    </where>
  </select>
  
  <!-- List<Holiday> selectCreatByMeLikeStateType(@Param("state") String state, @Param("type") String type); -->
  <select id="selectCreatByMeLikeStateType" resultType="Holiday">
  	SELECT 
	ho.date,ho.id, ho.type, ho.startday, ho.endday, ho.holidaydays, ho.test, ho.reason, ho.enclosure, ho.processInstanceId
	FROM holiday ho
	LEFT JOIN user_holiday  uh ON uh.holidayId = ho.id
	LEFT JOIN t_user tu ON tu.id = uh.userId
	<where>
    	tu.id = #{userId}
	    <if test="state != '状态'">
	         AND test = #{state}
	    </if>
	    <if test="type != '类型'">
	         AND type = #{type}
	    </if>
    </where>
  </select>
  
  <!-- List<Holiday> selectExaminationByMeLikeStateType(@Param("username")String username, @Param("state") String state, @Param("type") String type); -->
  <select id="selectExaminationByMeLikeStateType" resultType="HolidayAndExaminationTime">
  	SELECT 
  	ho.date,ho.id, ho.type, ho.startday, ho.endday, ho.holidaydays, ho.test, ho.reason, ho.enclosure, ho.processInstanceId,aha.END_TIME_ as examinationTime, aha.START_TIME_ as startExaminationTime
	FROM holiday ho
	LEFT JOIN act_hi_actinst aha ON aha.PROC_INST_ID_=ho.processInstanceId
	<where>
    	aha.ASSIGNEE_=#{username}
	    <if test="state != '状态'">
	         AND test = #{state}
	    </if>
	    <if test="type != '类型'">
	         AND type = #{type}
	    </if>
    </where>
  </select>
  <!-- List<HolidayAndExaminationTime> selectCompleteByMeLikeStateType(@Param("username")String username, @Param("state") String state, @Param("type") String type); -->
  <select id="selectCompleteByMeLikeStateType" resultType="HolidayAndExaminationTime">
    SELECT 
	ho.date,ho.id, ho.type, ho.startday, ho.endday, ho.holidaydays, ho.test, ho.reason, ho.enclosure, ho.processInstanceId,ahv.LAST_UPDATED_TIME_ AS examinationTime
	FROM holiday ho
	LEFT JOIN act_hi_varinst ahv ON ahv.PROC_INST_ID_=ho.processInstanceId
	<where>
    	ahv.TEXT_=#{username}
		AND ahv.NAME_='completePeople'
	    <if test="state != '状态'">
	         AND test = #{state}
	    </if>
	    <if test="type != '类型'">
	         AND type = #{type}
	    </if>
    </where>
  </select>
  
  <!-- List<Holiday> selectListHolidayByProcessInstanceId(StringBuffer holidayByProcessInstance); -->
  <select id="selectListHolidayByProcessInstanceId" resultType="Holiday">
	select 
    <include refid="Base_Column_List" />
    from holiday
    where processinstanceid IN
    <foreach item="item" index="index" collection="list"  open="(" separator="," close=")"> 
    #{item} 
    </foreach>
  </select>
  
  <!-- void deleteHolidayByProcessInstanceId(List<String> processInstanceId); -->
  <delete id="deleteHolidayByProcessInstanceId">
  	delete from holiday 
	where processinstanceid IN
    <foreach item="item" index="index" collection="list"  open="(" separator="," close=")"> 
    #{item} 
    </foreach>
  </delete>
  
  
  
  
  
</mapper>
















