<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hanming.oa.dao.WorkAttendanceMapper">
  <resultMap id="BaseResultMap" type="com.hanming.oa.model.WorkAttendance">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="userId" jdbcType="INTEGER" property="userId" />
    <result column="startDate" jdbcType="VARCHAR" property="startdate" />
    <result column="endDate" jdbcType="VARCHAR" property="enddate" />
    <result column="date" jdbcType="VARCHAR" property="date" />
    <result column="userIp" jdbcType="VARCHAR" property="userIp" />
  </resultMap>
  
  <resultMap type="com.hanming.oa.model.WorkAttendenceDisplay" id="WorkAttendenceDisplay">
  	<id column="id" jdbcType="INTEGER" property="id" />
    <result column="userId" jdbcType="INTEGER" property="userId" />
    <result column="userName" jdbcType="INTEGER" property="userName" />
    <result column="startDate" jdbcType="VARCHAR" property="startdate" />
    <result column="endDate" jdbcType="VARCHAR" property="enddate" />
    <result column="date" jdbcType="VARCHAR" property="date" />
    <result column="userIp" jdbcType="VARCHAR" property="userIp" />
    
    <collection property="state" javaType="ArrayList" column="id" ofType="String" select="getStateByWorkAttendenceId"></collection>
  </resultMap>  
  
  <sql id="Base_Column_List">
    id, userId, startDate, endDate, date, userIp
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from workattendance
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from workattendance
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.hanming.oa.model.WorkAttendance">
    insert into workattendance (id, userId, startDate, 
      endDate, date, userIp
      )
    values (#{id,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{startdate,jdbcType=VARCHAR}, 
      #{enddate,jdbcType=VARCHAR}, #{date,jdbcType=VARCHAR}, #{userip,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="com.hanming.oa.model.WorkAttendance">
    insert into workattendance
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userid != null">
        userId,
      </if>
      <if test="startdate != null">
        startDate,
      </if>
      <if test="enddate != null">
        endDate,
      </if>
      <if test="date != null">
        date,
      </if>
      <if test="userip != null">
        userIp,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="startdate != null">
        #{startdate,jdbcType=VARCHAR},
      </if>
      <if test="enddate != null">
        #{enddate,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        #{date,jdbcType=VARCHAR},
      </if>
      <if test="userip != null">
        #{userip,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hanming.oa.model.WorkAttendance">
    update workattendance
    <set>
      <if test="userid != null">
        userId = #{userid,jdbcType=INTEGER},
      </if>
      <if test="startdate != null">
        startDate = #{startdate,jdbcType=VARCHAR},
      </if>
      <if test="enddate != null">
        endDate = #{enddate,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        date = #{date,jdbcType=VARCHAR},
      </if>
      <if test="userip != null">
        userIp = #{userip,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hanming.oa.model.WorkAttendance">
    update workattendance
    set userId = #{userid,jdbcType=INTEGER},
      startDate = #{startdate,jdbcType=VARCHAR},
      endDate = #{enddate,jdbcType=VARCHAR},
      date = #{date,jdbcType=VARCHAR},
      userIp = #{userip,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- getStateByWorkAttendenceId -->
  <select id="getStateByWorkAttendenceId" resultType="String">
  	SELECT
	state
	FROM workAttendencePunishment wap
	LEFT JOIN workattendance wa ON wap.workAttendenceId=wa.id
	where wa.id = #{id}
  </select>
  
  <!-- List<WorkAttendenceDisplay> list(@Param("date") String date, @Param("isByMyId") Integer isByMyId,
			@Param("userName") String userName, @Param("state") String state); -->
  <select id="list" resultMap="WorkAttendenceDisplay">
  	SELECT
	wa.id,wa.startDate,wa.endDate,wa.date,wa.userIp,tu.id AS userId,tu.`name` AS userName
	FROM workattendance wa 
	LEFT JOIN t_user tu ON tu.id=wa.userId
  	<where>
  		wa.`date` like '%' #{date} '%'
  		<if test="isByMyId != 0">
  			AND tu.id = #{isByMyId}
  		</if>
  		<if test="userName != '姓名'">
  			AND tu.`name` = #{userName}
  		</if>
  		order by wa.`date` desc
  	</where>
  </select>
  
  <!-- Integer selectNormalByMonthStatistics(String date); -->
  <select id="selectNormalByMonthStatistics" resultType="Integer">
  	SELECT
	COUNT(*)
	FROM workAttendencePunishment wap
	LEFT JOIN workattendance wa ON wap.workAttendenceId=wa.id
	<where>
		wap.state='正常' AND wa.date like '%' #{date} '%'
	</where>
  </select>
  
  <!-- Integer Integer selectLateByMonthStatistics(String date); -->
  <select id="selectLateByMonthStatistics" resultType="Integer">
  	SELECT
	COUNT(*)
	FROM workAttendencePunishment wap
	LEFT JOIN workattendance wa ON wap.workAttendenceId=wa.id
	<where>
		wap.state='迟到' AND wa.date like '%' #{date} '%'
	</where>
  </select>
  
  <!-- Integer Integer selectLeaveByMonthStatistics(String date); -->
  <select id="selectLeaveByMonthStatistics" resultType="Integer">
  	SELECT
	COUNT(*)
	FROM workAttendencePunishment wap
	LEFT JOIN workattendance wa ON wap.workAttendenceId=wa.id
	<where>
		wap.state='早退' AND wa.date like '%' #{date} '%'
	</where>
  </select>
  
  <!-- Integer Integer Integer selectOverTimeByMonthStatistics(String date); -->
  <select id="selectOverTimeByMonthStatistics" resultType="Integer">
  	SELECT
	COUNT(*)
	FROM workAttendencePunishment wap
	LEFT JOIN workattendance wa ON wap.workAttendenceId=wa.id
	<where>
		wap.state='加班' AND wa.date like '%' #{date} '%'
	</where>
  </select>
  
  <!-- Long selectpunishmentTime(String date); -->
  <select id="selectpunishmentTime" resultType="Long">
  	SELECT 
	SUM(wap.punishmentTime)
	FROM workAttendencePunishment wap
	LEFT JOIN workattendance wa ON wap.workAttendenceId=wa.id
	WHERE wap.state != '正常' AND wa.date like '%' #{date} '%'
  </select>
  
  <!-- Integer selectCountByDate(String nowDate); -->
  <select id="selectCountByDate" resultType="Integer">
  	SELECT count(wap.state)
  	FROM workAttendencePunishment wap
	LEFT JOIN workattendance wa ON wap.workAttendenceId=wa.id
  	WHERE wa.date = #{nowDate}
  </select>
  
  <!-- List<WorkAttendance> selectByPrimaryKeys(List<Integer> idsInt); -->
  <select id="selectByPrimaryKeys">
  	select 
    <include refid="Base_Column_List" />
    from workattendance
    where id In
    <foreach item="item" index="index" collection="list"  open="(" separator="," close=")"> 
    #{item} 
    </foreach>
  </select>
  
  <!-- void deleByIds(List<Integer> idsInt); -->
  <delete id="deleByIds">
  	delete from workattendance
    where id IN
     <foreach item="item" index="index" collection="list"  open="(" separator="," close=")"> 
    #{item} 
    </foreach>
  </delete>
  
</mapper>